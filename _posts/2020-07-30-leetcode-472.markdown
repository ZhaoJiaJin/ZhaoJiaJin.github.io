---
layout: post
title:  "472. Concatenated Words"
date:   2020-07-30 15:10:33 +0100
categories: [algorithm, leetcode, Trie, DFS]
---

#[Problem](https://leetcode.com/problems/concatenated-words/)

DFS + Trie

```python
class Trie(object):
    def __init__(self):
        self.root = {}
    def insert(self,w):
        cur = self.root
        for c in w:
            if c not in cur:
                cur[c] = {}
            cur = cur[c]
        cur['#'] = True
    # find all the prefixes that exist in trie of word w
    def findPrefix(self,w):
        res = []
        cur = self.root
        for i in range(len(w)):
            if w[i] not in cur:
                return res[::-1] # inverse here so we can match the longest prefix first
            cur = cur[w[i]]
            if '#' in cur:
                res.append(i)
        return res[::-1]

class Solution(object):
    def __init__(self):
        self.ans = []
        self.trie = Trie()
    def findAllConcatenatedWordsInADict(self, oriwords):
        """
        :type words: List[str]
        :rtype: List[str]
        """
        ans = []
        words = set()
        for w in oriwords:
            if len(w) != 0:
                words.add(w)
                self.trie.insert(w)
        for word in words:
            if self.dfs(0,word,len(word),words,0):
                ans.append(word)
        return ans
    
    def dfs(self,i,w,L,words,depth):
        if i == L:
            if depth != 1:
                return True
            else:
                return False
        cur = self.trie.root
        prefixpos = self.trie.findPrefix(w[i:])
        for pos in prefixpos:
            if self.dfs(i+pos+1,w,L,words,depth+1):
                return True
        return False
        
```
