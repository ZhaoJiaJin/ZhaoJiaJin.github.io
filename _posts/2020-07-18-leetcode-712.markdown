---
layout: post
title:  "712. Minimum ASCII Delete Sum for Two Strings"
date:   2020-07-18 17:28:05 +0100
categories: [algorithm, leetcode, DP]
---

# Problem

Given two strings `s1, s2`, find the lowest ASCII sum of deleted characters to make two strings equal.

**Example 1:**

```
Input: s1 = "sea", s2 = "eat"
Output: 231
Explanation: Deleting "s" from "sea" adds the ASCII value of "s" (115) to the sum.
Deleting "t" from "eat" adds 116 to the sum.
At the end, both strings are equal, and 115 + 116 = 231 is the minimum sum possible to achieve this.
```



# Solution:

This is a DP problem, it is the same with Problem 583.

```python
class Solution(object):
    def minimumDeleteSum(self, s1, s2):
        """
        :type s1: str
        :type s2: str
        :rtype: int
        """
        m = len(s1)
        n = len(s2)
        dp = [[float("inf") for _ in range(n+1)] for _ in range(m+1)]
        #dp[i][j] means the lowest ASCII sum to make s1[:i] and s2[:j] equal, we will add padding to the left and top side
        #init state
        prefix = 0
        for i in range(1,m+1):
            prefix += ord(s1[i-1])
            dp[i][0] = prefix
        prefix = 0
        for i in range(1,n+1):
            prefix += ord(s2[i-1])
            dp[0][i] = prefix
        dp[0][0] = 0
        #print(dp)
        for r in range(1,m+1):
            for c in range(1,n+1):
                if s1[r-1] == s2[c-1]: # next char is equal, which mean we don't need to delete char if we shift the state from dp[r-1][c-1]
                    dp[r][c] = min(dp[r][c],dp[r-1][c-1],dp[r-1][c] + ord(s1[r-1]), dp[r][c-1] + ord(s2[c-1]))
                else:
                    dp[r][c] = min(dp[r][c],dp[r-1][c-1] + ord(s1[r-1]) + ord(s2[c-1]),dp[r-1][c] + ord(s1[r-1]), dp[r][c-1] + ord(s2[c-1]))
        #print(dp)
        return dp[m][n]

        
```

Time Complexity: O(mn)

Space Complexity: O(mn)
