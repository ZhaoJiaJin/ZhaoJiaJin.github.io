---
layout: post
title:  "477. Total Hamming Distance"
date:   2020-07-30 19:46:27 +0100
categories: [leetcode, algorithm, bit-operation]
---

# [Problem](https://leetcode.com/problems/total-hamming-distance/)

1. Brute force solution with XOR operation 

time complexity: O(n^2)
space complexity: O(1)

2. smarter bit operation

We shift all the number together, and count the number of 1's and 0's at the last bit, then result is the sum of all the bits's count0 * count 1

```python
class Solution(object):
    def totalHammingDistance(self, nums):
        """
        :type nums: List[int]
        :rtype: int
        """
        res = 0
        for i in range(32):
            cnt0 = 0
            cnt1 = 0
            for n in nums:
                if (n >> i) & 1 == 0:
                    cnt0 += 1
                else:
                    cnt1 += 1
            res += cnt0*cnt1
        return res
        
```

time complexity: O(n)
space complexity: O(1)
